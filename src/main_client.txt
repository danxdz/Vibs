#include <Arduino.h>
#include <Wire.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"

#include <WiFi.h>
#include <WiFiUDP.h>

const int MPU_ADDR = 0x68;
int16_t AcX, AcY, AcZ, GyX, GyY, GyZ;

const char* ssid = "Home";
const char* password = "wifi_password";

const char* broadcastIP = "255.255.255.255"; 
const int serverPort = 12345;

WiFiUDP udp;

void setupMPU6050() {
    Wire.begin();
    Wire.setClock(400000);  // Set to 400kHz, which is usually stable for MPU6050


    Wire.beginTransmission(MPU_ADDR);
    Wire.write(0x6B); 
    Wire.write(0x01); 
    Wire.endTransmission(true);

    Wire.beginTransmission(MPU_ADDR);
    Wire.write(0x1A);
    Wire.write(0x00); 
    Wire.endTransmission(true);
}

void readMPU6050() {
    Wire.beginTransmission(MPU_ADDR);
    Wire.write(0x3B);
    Wire.endTransmission(false);
    Wire.requestFrom(MPU_ADDR, 14, true);

    AcX = Wire.read() << 8 | Wire.read();
    AcY = Wire.read() << 8 | Wire.read();
    AcZ = Wire.read() << 8 | Wire.read();
    Wire.read(); Wire.read(); // Skip Temp data
    GyX = Wire.read() << 8 | Wire.read();
    GyY = Wire.read() << 8 | Wire.read();
    GyZ = Wire.read() << 8 | Wire.read();
}

void setup() {
    Serial.begin(115200);
    WiFi.begin(ssid, password);
    
    while (WiFi.status() != WL_CONNECTED) {
        delay(2000);
        Serial.println("Connecting to WiFi...");
    }
    Serial.println("Connected to WiFi");

    udp.begin(serverPort);  
    Serial.println("UDP server started");

    Serial.println("Setup MPU6050");
    setupMPU6050();
    Serial.println("MPU6050 started");
    
    Serial.println("Sending data to UDP server");

}

void loop() {
    static unsigned long lastTime = 0;
    unsigned long currentTime = millis();

    // Only send data every 1ms
    if (currentTime - lastTime >= 1) {
        readMPU6050();

        // Prepare data as CSV string
        String dataString = String(GyX) + "," + String(GyY) + "," + String(GyZ) + "," + String(millis());

        // Send data as text string over UDP (convert to byte array and specify length)
        udp.beginPacket(broadcastIP, serverPort);
        udp.write((uint8_t*)dataString.c_str(), dataString.length());  // Send the string data
        udp.endPacket();  // End the packet and send it
        
        lastTime = currentTime;
    }
}
