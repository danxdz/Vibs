#include <Wire.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>

Adafruit_MPU6050 mpu;

// Constants for the moving average filter
#define NUM_SAMPLES 10
float ax_samples[NUM_SAMPLES], ay_samples[NUM_SAMPLES], az_samples[NUM_SAMPLES];
int sample_index = 0;
float ax_filtered = 0, ay_filtered = 0, az_filtered = 0;

// Calibration constants (these will be updated with initial values)
float ax_offset = 0.0, ay_offset = 0.0, az_offset = 0.0;

#define MAX_BAR_HEIGHT 3  // Max height of the vertical bar (only 3 lines)

#define VIBRATION_THRESHOLD 0.05  // Threshold for detecting vibration

// Calibration function
void calibrateAccelerometer() {
  Serial.println("Calibrating accelerometer... Please keep it still.");
  delay(2000);  // Wait 2 seconds to stabilize

  float ax_sum = 0.0, ay_sum = 0.0, az_sum = 0.0;
  for (int i = 0; i < 100; i++) {
    sensors_event_t a, g, temp;
    mpu.getEvent(&a, &g, &temp);

    ax_sum += a.acceleration.x;
    ay_sum += a.acceleration.y;
    az_sum += a.acceleration.z;

    delay(10);
  }

  ax_offset = ax_sum / 100.0;
  ay_offset = ay_sum / 100.0;
  az_offset = az_sum / 100.0;

  Serial.print("Accelerometer offsets: X=");
  Serial.print(ax_offset);
  Serial.print(" Y=");
  Serial.print(ay_offset);
  Serial.print(" Z=");
  Serial.println(az_offset);
}

void setup() {
  Serial.begin(400000);
  Wire.begin();

  if (!mpu.begin()) {
    Serial.println("Couldn't find MPU6050");
    while (1);
  }

  mpu.setAccelerometerRange(MPU6050_RANGE_2_G);

  calibrateAccelerometer();
}

void loop() {
  // Read accelerometer data
  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);

  a.acceleration.x -= ax_offset;
  a.acceleration.y -= ay_offset;
  a.acceleration.z -= az_offset;

  ax_samples[sample_index] = a.acceleration.x;
  ay_samples[sample_index] = a.acceleration.y;
  az_samples[sample_index] = a.acceleration.z;

  sample_index = (sample_index + 1) % NUM_SAMPLES;

  // Apply moving average filter
  ax_filtered = 0;
  ay_filtered = 0;
  az_filtered = 0;
  for (int i = 0; i < NUM_SAMPLES; i++) {
    ax_filtered += ax_samples[i];
    ay_filtered += ay_samples[i];
    az_filtered += az_samples[i];
  }
  ax_filtered /= NUM_SAMPLES;
  ay_filtered /= NUM_SAMPLES;
  az_filtered /= NUM_SAMPLES;

  // Check for vibration (threshold)
  bool vib_x = abs(ax_filtered) > VIBRATION_THRESHOLD;
  bool vib_y = abs(ay_filtered) > VIBRATION_THRESHOLD;
  bool vib_z = abs(az_filtered) > VIBRATION_THRESHOLD;


  // Check and display vibration status
  if (vib_x) {
    Serial.print("*");
  } else {
    Serial.print(" ");
  }

  if (vib_y) {
    Serial.print("*");
  } else {
    Serial.print(" ");
  }

  if (vib_z) {
    Serial.print("*");
  } else {
    Serial.print(" ");
  }

  Serial.println();  // Move to next line

  // Wait for a bit before the next reading
  delay(1);
}
