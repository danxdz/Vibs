#include <Arduino.h>
#include <Wire.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include <WiFi.h>
#include <WiFiUDP.h>

const int MPU_ADDR = 0x68;
int16_t AcX, AcY, AcZ, GyX, GyY, GyZ;

// Hotspot credentials
const char* hotspot_ssid = "Vibs_Hotspot";  
const char* hotspot_password = "Vibs123456";

// WiFi credentials
const char* wifi_ssid = "Home";
const char* wifi_password = "wifi_password";

// UDP settings
IPAddress clientIP;         
bool clientConnected = false;  
bool isHotspotMode = false;
const int serverPort = 12345;
WiFiUDP udp;

unsigned long lastDiscoveryTime = 0;
const unsigned long DISCOVERY_TIMEOUT = 10000; // 10 seconds timeout

void setupMPU6050() {
  Wire.begin();
  Wire.setClock(400000);
  Wire.beginTransmission(MPU_ADDR);
  Wire.write(0x6B); 
  Wire.write(0x01); 
  Wire.endTransmission(true);
}

void readMPU6050() {
  Wire.beginTransmission(MPU_ADDR);
  Wire.write(0x3B);
  Wire.endTransmission(false);
  Wire.requestFrom(MPU_ADDR, (uint8_t)14, 0);
  AcX = Wire.read() << 8 | Wire.read();
  AcY = Wire.read() << 8 | Wire.read();
  AcZ = Wire.read() << 8 | Wire.read();
  Wire.read(); Wire.read();
  GyX = Wire.read() << 8 | Wire.read();
  GyY = Wire.read() << 8 | Wire.read();
  GyZ = Wire.read() << 8 | Wire.read();
}

// Function to check for client discovery or keep-alive messages
void checkForDiscovery() {
  int packetSize = udp.parsePacket();
  if (packetSize) {
    char buffer[32];
    int len = udp.read(buffer, sizeof(buffer) - 1);
    if (len > 0) {
      buffer[len] = 0; 
      String message = String(buffer);
      
      if (message == "DISCOVER_VIBS_SERVER") {
        clientIP = udp.remoteIP();
        clientConnected = true;
        lastDiscoveryTime = millis();
        udp.beginPacket(clientIP, serverPort);
        udp.write((uint8_t*)"SERVER_ACK", strlen("SERVER_ACK"));

        udp.endPacket();
        Serial.print("‚úÖ Client discovered: ");
        Serial.println(clientIP.toString());
      }
    }
  }
}

// Function to check if client is still connected
void checkClientStatus() {
  if (isHotspotMode && WiFi.softAPgetStationNum() == 0) {
    Serial.println("‚ö†Ô∏è No clients connected to hotspot. Disconnecting...");
    clientConnected = false;
  }
  
  if (clientConnected && millis() - lastDiscoveryTime > DISCOVERY_TIMEOUT) {
    Serial.println("‚ö†Ô∏è Client timeout. Disconnecting...");
    clientConnected = false;
  }
}

// Task to send data
void sendDataTask(void* pvParameters) {
  unsigned long lastTime = 0;
  while (true) {
    checkForDiscovery();
    checkClientStatus();
    
    if (clientConnected && millis() - lastTime >= 1) {
      readMPU6050();
      String dataString = String(GyX) + "," + String(GyY) + "," + String(GyZ) + "," + String(millis());
      udp.beginPacket(clientIP, serverPort);
      udp.write((uint8_t*)dataString.c_str(), dataString.length());

      udp.endPacket();
      Serial.printf("üöÄ Data sent to %s: %s\n", clientIP.toString().c_str(), dataString.c_str());
      lastTime = millis();
    }
    //delay(10);
  }
}

bool connectToWiFi() {
  WiFi.mode(WIFI_STA);
  WiFi.begin(wifi_ssid, wifi_password);
  Serial.println("üîÑ Connecting to WiFi...");
  unsigned long startTime = millis();
  while (WiFi.status() != WL_CONNECTED) {
    if (millis() - startTime > 10000) {
      Serial.println("‚ùå WiFi connection failed!");
      return false;
    }
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ Connected to WiFi!");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());
  return true;
}

void setup() {
  Serial.begin(115200);
  Wire.begin();
  
  WiFi.softAP(hotspot_ssid, hotspot_password);
  Serial.println("üõú Hotspot created");
  Serial.print("Hotspot IP Address: ");
  Serial.println(WiFi.softAPIP());
  
  udp.begin(serverPort);
  Serial.println("üîÑ UDP server started. Waiting for client discovery...");
  
  unsigned long waitStart = millis();
  while (millis() - waitStart < 150000) {
    checkForDiscovery();
    if (clientConnected) {
      Serial.println("‚úÖ Client found, staying in hotspot mode.");
      isHotspotMode = true;
      break;
    }
    delay(100);
  }

  if (!clientConnected) {
    Serial.println("‚è≥ No client found. Switching to WiFi...");
    WiFi.softAPdisconnect(true);
    if (connectToWiFi()) {
      isHotspotMode = false;
    } else {
      Serial.println("‚ùå WiFi failed. Restarting...");
      ESP.restart();
    }
  }
  
  setupMPU6050();
  Serial.println("‚úÖ MPU6050 Ready");
  
  xTaskCreate(sendDataTask, "Send Data Task", 4096, NULL, 1, NULL);
}

void loop() {
  delay(1000);  
}
