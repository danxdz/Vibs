#include <Arduino.h>
#include <Wire.h>
#include <WiFi.h>
#include <WiFiUDP.h>

// MPU6050 settings
const int MPU_ADDR = 0x68;
int16_t AcX, AcY, AcZ, GyX, GyY, GyZ;

// Hotspot credentials
const char* hotspot_ssid = "Vibs_Hotspot";
const char* hotspot_password = "Vibs123456";

// UDP settings
WiFiUDP udp;
IPAddress clientIP;
bool clientConnected = false;
bool isSending = false;
const int serverPort = 12345;
unsigned long lastDiscoveryTime = 0;
const unsigned long DISCOVERY_TIMEOUT = 100000; // 10 seconds timeout

// Sampling & UDP Buffer
const int BATCH_SIZE = 1;  // Number of samples per UDP packet
String dataBuffer = "";

// Flag to choose between sending data as String or raw bytes
bool sendAsString = false;  // Set to false for raw byte packets

// Use ICACHE_RAM_ATTR for time-critical functions
void ICACHE_RAM_ATTR setupMPU6050() {
    Wire.beginTransmission(MPU_ADDR);
    Wire.write(0x6B);  // Power management register
    Wire.write(0x01);  // Wake up & set clock source
    Wire.endTransmission(true);

    Wire.beginTransmission(MPU_ADDR);
    Wire.write(0x1A);  // Config register
    Wire.write(0x00);  // No DLPF, max bandwidth
    Wire.endTransmission(true);

    Wire.beginTransmission(MPU_ADDR);
    Wire.write(0x1B);  // Gyroscope config
    Wire.write(0x00);  // 250 deg/sec (higher sensitivity)
    Wire.endTransmission(true);

    Wire.beginTransmission(MPU_ADDR);
    Wire.write(0x1C);  // Accelerometer config register
    Wire.write(0x00);  // Â±2g (most sensitive setting)
    Wire.endTransmission(true);

    // Set sample rate to 400Hz
    Wire.beginTransmission(MPU_ADDR);
    Wire.write(0x19);  // Sample Rate Divider
    Wire.write(0x14);  // Set SMPRT_DIV = 20 for 400 Hz sampling
    Wire.endTransmission(true);
}

void ICACHE_RAM_ATTR readMPU6050() {
    Wire.beginTransmission(MPU_ADDR);
    Wire.write(0x3B);  // Start reading at register 0x3B
    Wire.endTransmission(false);
    Wire.requestFrom(MPU_ADDR, (uint8_t)14, true);

    AcX = (Wire.read() << 8) | Wire.read();
    AcY = (Wire.read() << 8) | Wire.read();
    AcZ = (Wire.read() << 8) | Wire.read();
    Wire.read(); Wire.read();  // Skip temperature

    GyX = (Wire.read() << 8) | Wire.read();
    GyY = (Wire.read() << 8) | Wire.read();
    GyZ = (Wire.read() << 8) | Wire.read();
}

// Check for client discovery packets
void ICACHE_RAM_ATTR checkForDiscovery() {
    int packetSize = udp.parsePacket();
    if (packetSize) {
        char buffer[32];
        int len = udp.read(buffer, sizeof(buffer) - 1);
        if (len > 0) {
            buffer[len] = 0;
            if (String(buffer) == "DISCOVER_VIBS_SERVER") {
                clientIP = udp.remoteIP();
                if (!clientConnected) {
                    Serial.print("âœ… New client connected: ");
                    Serial.println(clientIP.toString());
                }
                clientConnected = true;
                lastDiscoveryTime = millis();
                udp.beginPacket(clientIP, serverPort);
                udp.write((uint8_t*)"SERVER_ACK", strlen("SERVER_ACK"));
                udp.endPacket();
            }
        }
    }
}

// Check if the client is still active
void ICACHE_RAM_ATTR checkClientStatus() {
    if (clientConnected && (WiFi.softAPgetStationNum() == 0 || millis() - lastDiscoveryTime > DISCOVERY_TIMEOUT)) {
        clientConnected = false;
        if (isSending) {
            Serial.println("ðŸ›‘ Stopped sending packets. Client disconnected.");
            isSending = false;
        }
    }
}

// Task to send sensor data via UDP
void sendDataTask(void* pvParameters) {
    unsigned long lastTime = millis();

    while (true) {
        checkForDiscovery();
        checkClientStatus();

        if (clientConnected) {
            if (!isSending) {
                Serial.println("ðŸš€ Started sending packets...");
                isSending = true;
            }

            readMPU6050();

            // Create data packet
            String packet = String(GyX) + "," + String(GyY) + "," + String(GyZ) + "," + String(millis()) + "\n";

            if (sendAsString) {
                // Send data as a string
                udp.beginPacket(clientIP, serverPort);
                udp.write((uint8_t*)packet.c_str(), packet.length());
                udp.endPacket();
            } else {
                // Send data as raw bytes
                byte dataPacket[12];  // Example: 3 x 2-byte integers (GyX, GyY, GyZ)
                memcpy(dataPacket, &GyX, sizeof(GyX));
                memcpy(dataPacket + 2, &GyY, sizeof(GyY));
                memcpy(dataPacket + 4, &GyZ, sizeof(GyZ));
                memcpy(dataPacket + 6, &AcX, sizeof(AcX));
                memcpy(dataPacket + 8, &AcY, sizeof(AcY));
                memcpy(dataPacket + 10, &AcZ, sizeof(AcZ));
                unsigned long timestamp = millis();  // Store millis() in a variable
                memcpy(dataPacket + 12, &timestamp, sizeof(timestamp));  // Copy its address

                
                udp.beginPacket(clientIP, serverPort);
                udp.write(dataPacket, sizeof(dataPacket));
                udp.endPacket();
            }

            // Send the packet immediately, no batching involved
            if (millis() - lastTime >= 2.5) {  // 400 Hz -> 2.5ms per packet
                lastTime = millis();
            }
        } else if (isSending) {
            Serial.println("ðŸ›‘ Stopped sending packets.");
            isSending = false;
        }

        vTaskDelay(1); // Prevents CPU hogging
    }
}

void setup() {
    Serial.begin(400000);
    Wire.begin();
    Wire.setClock(400000);  // Set I2C clock to 1MHz for fast reads

    // Start WiFi hotspot
    WiFi.softAP(hotspot_ssid, hotspot_password);
    Serial.println("ðŸ›œ Hotspot active");
    Serial.print("Hotspot IP: ");
    Serial.println(WiFi.softAPIP());

    udp.begin(serverPort);

    Serial.println("ðŸ”„ UDP server started. Waiting for client...");

    setupMPU6050();
    Serial.println("âœ… MPU6050 Ready");

    // Start the data transmission task
    xTaskCreate(sendDataTask, "Send Data Task", 4096, NULL, 1, NULL);
}

void loop() {
    vTaskDelay(1);  // Nothing in loop to avoid unnecessary CPU usage
}
