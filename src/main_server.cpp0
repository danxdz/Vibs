#include <Arduino.h>
#include <Wire.h>
#include <WiFi.h>
#include <WiFiUDP.h>

// MPU6050 settings
const int MPU_ADDR = 0x68;
int16_t AcX, AcY, AcZ, GyX, GyY, GyZ;

// Hotspot credentials
const char* hotspot_ssid = "Vibs_Hotspot";
const char* hotspot_password = "Vibs123456";

uint32_t currentMicros  = micros();
uint32_t previousMicros = micros();
uint32_t elapsedTime = 0;


// UDP settings
WiFiUDP udp;
IPAddress clientIP;
bool clientConnected = false;
bool isSending = false;
const int serverPort = 12345;
unsigned long lastDiscoveryTime = 0;
const unsigned long DISCOVERY_TIMEOUT = 600000; // 10 seconds timeout

// Sampling & UDP Buffer
const int BATCH_SIZE = 10;  // Number of samples per UDP packet

// Buffer to store sensor data
uint8_t dataBuffer[16];  // 6 * 3 (GyX, GyY, GyZ, AcX, AcY, AcZ) + 4 (timestamp)

void setupMPU6050() {
    Wire.beginTransmission(MPU_ADDR);
    Wire.write(0x6B);  // Power management register
    Wire.write(0x01);  // Wake up & set clock source
    Wire.endTransmission(true);

    Wire.beginTransmission(MPU_ADDR);
    Wire.write(0x1A);  // Config register
    Wire.write(0x00);  // No DLPF, max bandwidth
    Wire.endTransmission(true);

    Wire.beginTransmission(MPU_ADDR);
    Wire.write(0x1B);  // Gyroscope config
    Wire.write(0x08);  // ¬±500 deg/sec
    Wire.endTransmission(true);

    Wire.beginTransmission(MPU_ADDR);
    Wire.write(0x19);  // Sample Rate Divider
    Wire.write(0x00);  // 1kHz sampling (SMPRT_DIV = 0)
    Wire.endTransmission(true);
}

void readMPU6050() {
    Wire.beginTransmission(MPU_ADDR);
    Wire.write(0x3B);  // Start reading at register 0x3B
    Wire.endTransmission(false);
    Wire.requestFrom(MPU_ADDR, (uint8_t)14, true);

    AcX = (Wire.read() << 8) | Wire.read();
    AcY = (Wire.read() << 8) | Wire.read();
    AcZ = (Wire.read() << 8) | Wire.read();
    Wire.read(); Wire.read();  // Skip temperature

    GyX = (Wire.read() << 8) | Wire.read();
    GyY = (Wire.read() << 8) | Wire.read();
    GyZ = (Wire.read() << 8) | Wire.read();
}

// Check for client discovery packets
void checkForDiscovery() {
    int packetSize = udp.parsePacket();
    if (packetSize) {
        Serial.print("üîç Discovery packet received from: ");
        Serial.println(udp.remoteIP());
        char buffer[32];
        int len = udp.read(buffer, sizeof(buffer) - 1);
        if (len > 0) {
            buffer[len] = 0;
            if (String(buffer) == "DISCOVER_VIBS_SERVER") {
                clientIP = udp.remoteIP();
                if (!clientConnected) {
                    Serial.print("‚úÖ New client connected: ");
                    Serial.println(clientIP.toString());
                }
                clientConnected = true;
                lastDiscoveryTime = millis();
                udp.beginPacket(clientIP, serverPort);
                udp.write((uint8_t*)"SERVER_ACK", strlen("SERVER_ACK"));
                udp.endPacket();
                Serial.println("üöÄ ACK sent to client.");
            }
        }
    }
}

// Check if the client is still active
void checkClientStatus() {
    if (clientConnected && (WiFi.softAPgetStationNum() == 0 || millis() - lastDiscoveryTime > DISCOVERY_TIMEOUT)) {
        clientConnected = false;
        if (isSending) {
            Serial.println("üõë Stopped sending packets. Client disconnected.");
            isSending = false;
        }
    }
}

// Task to send sensor data via UDP
void sendDataTask(void* pvParameters) {
    unsigned long lastTime = millis();
    int count = 0;

    while (true) {
        checkForDiscovery();
        checkClientStatus();

        if (clientConnected) {
            if (!isSending) {
                Serial.println("üöÄ Started sending packets...");
                isSending = true;
            }

            readMPU6050();
            //dataBuffer += String(GyX) + "," + String(GyY) + "," + String(GyZ) + "," + String(AcX) + "," + String(AcY) + "," + String(AcZ) + "," + String(millis()) + "\n";

            // Pack data into the buffer as int16_t values
            memcpy(dataBuffer, &GyX, sizeof(GyX));
            memcpy(dataBuffer + 2, &GyY, sizeof(GyY));
            memcpy(dataBuffer + 4, &GyZ, sizeof(GyZ));
            memcpy(dataBuffer + 6, &AcX, sizeof(AcX));
            memcpy(dataBuffer + 8, &AcY, sizeof(AcY));
            memcpy(dataBuffer + 10, &AcZ, sizeof(AcZ));

            // Add timestamp to the buffer (using micros() for timestamp)
            uint32_t timestamp = micros();
            memcpy(dataBuffer + 12, &timestamp, sizeof(timestamp));

            udp.beginPacket(clientIP, serverPort);
            udp.write(dataBuffer, sizeof(dataBuffer));
            udp.endPacket();
            
            // Clear buffer after sending
            memset(dataBuffer, 0, sizeof(dataBuffer));
            
        } else if (isSending) {
            Serial.println("üõë Stopped sending packets.");
            isSending = false;
        }

        vTaskDelay(1); // Prevents CPU hogging
    }
}

void setup() {
    Serial.begin(115200);
    Wire.begin();
    Wire.setClock(1000000);  // Set I2C clock to 1MHz for fast reads

    // Start WiFi hotspot
    WiFi.softAP(hotspot_ssid, hotspot_password);
    Serial.println("üõú Hotspot active");
    Serial.print("Hotspot IP: ");
    Serial.println(WiFi.softAPIP());
    //can optimize wifi for udp
    WiFi.config(INADDR_NONE, INADDR_NONE, INADDR_NONE, INADDR_NONE); // Disable DHCP



    udp.begin(serverPort);
    Serial.println("üîÑ UDP server started. Waiting for client...");

    setupMPU6050();
    Serial.println("‚úÖ MPU6050 Ready");

    // Start the data transmission task
    xTaskCreate(sendDataTask, "Send Data Task", 2048, NULL, -1, NULL);
}

void loop() {
    static unsigned long lastReportTime = 0;

    if (millis() - lastReportTime >= 10000) {  // Every 3 seconds
        lastReportTime = millis();

        Serial.print("üìä Free Heap (RAM): ");
        Serial.print(ESP.getFreeHeap());  // Print free RAM
        Serial.println(" bytes");

        Serial.print("üñ•Ô∏è Running on Core: ");
        Serial.println(xPortGetCoreID());  // Print active CPU core (0 or 1)
    }

    vTaskDelay(5);  // Avoid unnecessary CPU usage
}
